{"version":3,"sources":["components/TodoListTemplate.js","components/Form.js","components/TodoItem.js","components/TodoItemList.js","components/Palette.js","App.js","serviceWorker.js","index.js"],"names":["TodoListTemplate","form","palette","children","className","Form","value","onChange","onCreate","onKeyPress","color","style","onClick","TodoItem","nextProps","nextState","this","props","checked","text","id","onToggle","onRemove","e","stopPropagation","Component","TodoItemList","todos","todoList","map","key","Color","active","background","Palette","colors","selected","onSelect","colorList","App","state","input","handleChange","setState","target","handleCreate","concat","handleKeyPress","handleToggle","index","findIndex","todo","nextTodos","handleRemove","filter","handleSelectColor","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.16cf8f8a.chunk.js","sourcesContent":["import React from 'react';\r\nimport './TodoListTemplate.css';\r\n\r\nconst TodoListTemplate = ({form, palette, children}) => {\r\n    return (\r\n        <main className=\"todo-list-template\">\r\n            <div className=\"title\">\r\n                오늘 할 일\r\n            </div>\r\n            <section className=\"palette-wrapper\">\r\n                {palette}\r\n            </section>\r\n            <section className=\"form-wrapper\">\r\n                {form}\r\n            </section>\r\n            <section className=\"todos-wrapper\">\r\n                { children }\r\n            </section>\r\n        </main>\r\n    );\r\n};\r\n\r\nexport default TodoListTemplate;","import React from 'react';\r\nimport './Form.css';\r\n\r\nconst Form = ({value, onChange, onCreate, onKeyPress, color}) => {\r\n    return (\r\n        <div className=\"form\">\r\n            <input value={value} onChange={onChange} onKeyPress={onKeyPress} style={{color}}/>\r\n            <div className=\"create-button\" onClick={onCreate}>\r\n                추가\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Form;","import React, { Component } from 'react';\r\nimport './TodoItem.css';\r\n\r\nclass TodoItem extends Component {\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return this.props.checked !== nextProps.checked;\r\n    }\r\n\r\n    render() {\r\n        const { text, checked, id, color, onToggle, onRemove } = this.props;\r\n\r\n        return (\r\n            <div className=\"todo-item\" onClick={() => onToggle(id)}>\r\n                <div className=\"remove\" onClick={(e) => {\r\n                    e.stopPropagation(); // onToggle 이 실행되지 않도록 함\r\n                    onRemove(id)}\r\n                }>&times;</div>\r\n                <div style={{ color }} className={`todo-text ${checked && 'checked'}`}>\r\n                    <div>{text}</div>\r\n                </div>\r\n                {\r\n                    checked && (<div className=\"check-mark\">&#x2713;</div>)\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoItem;","import React, { Component } from 'react';\r\nimport TodoItem from './TodoItem';\r\n\r\nclass TodoItemList extends Component {\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return this.props.todos !== nextProps.todos;\r\n    }\r\n\r\n    render() {\r\n        const { todos, onToggle, onRemove } = this.props;\r\n\r\n        const todoList = todos.map(\r\n            ({id, text, checked, color}) => (\r\n                <TodoItem\r\n                    id={id}\r\n                    text={text}\r\n                    checked={checked}\r\n                    color={color}\r\n                    onToggle={onToggle}\r\n                    onRemove={onRemove}\r\n                    key={id}\r\n                />\r\n            )\r\n        );\r\n\r\n        return (\r\n            <div>\r\n                {todoList}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoItemList;","import React from 'react';\r\nimport './Palette.css';\r\n\r\nconst Color = ({ color, active, onClick }) => {\r\n    return (\r\n        <div className={`color ${active && 'active'}`} style={{ background: color}} onClick={onClick}>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Palette = ({colors, selected, onSelect}) => {\r\n    const colorList = colors.map(\r\n        (color) => (<Color color={color} active={selected===color} onClick={() => onSelect(color)} key={color}/>)\r\n    );\r\n    return (\r\n        <div className=\"palette\">\r\n            {colorList}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Palette;","import React, { Component } from 'react';\nimport TodoListTemplate from './components/TodoListTemplate';\nimport Form from './components/Form';\nimport TodoItemList from './components/TodoItemList';\nimport Palette from './components/Palette';\n\n\nconst colors = ['#343a40', '#f03e3e', '#12b886', '#228ae6'];\n\nclass App extends Component {\n\n    id = 3 // 이미 0,1,2 가 존재하므로 3으로 설정\n\n    state = {\n        input: '',\n        todos: [\n            { id: 0, text: ' 리액트 소개', checked: false },\n            { id: 1, text: 'JSX 사용해보기', checked: true },\n            { id: 2, text: '라이프 사이클 이해하기', checked: false },\n        ],\n        color: '#343a40'\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            input: e.target.value // input 의 다음 바뀔 값\n        });\n    }\n\n    handleCreate = () => {\n        const { input, todos, color } = this.state;\n        this.setState({\n            input: '', // 인풋 비우고\n            // concat 을 사용하여 배열에 추가\n            todos: todos.concat({\n                id: this.id++,\n                text: input,\n                checked: false,\n                color\n            })\n        });\n    }\n\n    handleKeyPress = (e) => {\n        // 눌려진 키가 Enter 면 handleCreate 호출\n        if(e.key === 'Enter') {\n            this.handleCreate();\n        }\n    }\n\n    handleToggle = (id) => {\n        const { todos } = this.state;\n\n        // 파라미터로 받은 id 를 가지고 몇번째 아이템인지 찾습니다.\n        const index = todos.findIndex(todo => todo.id === id);\n        const selected = todos[index]; // 선택한 객체\n\n        const nextTodos = [...todos]; // 배열을 복사\n\n        // 기존의 값들을 복사하고, checked 값을 덮어쓰기\n        nextTodos[index] = {\n            ...selected,\n            checked: !selected.checked\n        };\n\n        this.setState({\n            todos: nextTodos\n        });\n    }\n\n    handleRemove = (id) => {\n        const { todos } = this.state;\n        this.setState({\n            todos: todos.filter(todo => todo.id !== id)\n        });\n    }\n\n    handleSelectColor = (color) => {\n        this.setState({\n            color\n        })\n    }\n\n    render() {\n        const { input, todos, color } = this.state;\n        const {\n            handleChange,\n            handleCreate,\n            handleKeyPress,\n            handleToggle,\n            handleRemove,\n            handleSelectColor\n        } = this;\n\n        return (\n            <TodoListTemplate form={(\n                <Form\n                    value={input}\n                    onKeyPress={handleKeyPress}\n                    onChange={handleChange}\n                    onCreate={handleCreate}\n                    color={color}\n                />\n            )}\n                              palette={(\n                                  <Palette colors={colors} selected={color} onSelect={handleSelectColor}/>\n                              )}>\n                <TodoItemList todos={todos} onToggle={handleToggle} onRemove={handleRemove}/>\n            </TodoListTemplate>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}